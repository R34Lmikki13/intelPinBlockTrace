def ReadTraceFromFile(fileName):
    file = open(fileName)
    addr_list = []
    try:
        fileLine = file.readline()
        idx = fileLine.rfind('loaded at ')
        if (-1 == idx):
            print 'parse file failed!'
            return
        idx += len('loaded at ')
        base = fileLine[idx:]
        msg('base address in tlog is %s' % base)        
        while (True):
            fileLine = file.readline()
            addr_list.append(int(fileLine, 16))
    finally:
        file.close()
        return [addr_list, base]

def SetBBColor(ea, color):
    f = idaapi.get_func(ea)
    if not f:
        SetColor(ea, CIC_ITEM, color)
        return
    fc = idaapi.FlowChart(f)
    tag = False
    for BB in fc:
        if BB.startEA <= ea:
            if BB.endEA > ea:
                tag = True
                break
    if not tag:
        print 'No BB found! ea is %x' % ea
        SetColor(ea, CIC_ITEM, color)
        return 
    for ea in range(BB.startEA, BB.endEA):
        SetColor(ea, CIC_ITEM, color)

class blocktrace(Choose2):
    def __init__(self, title, cols, embedded = False):
        Choose2.__init__(self, title, cols, embedded = False)
        self.items = []

    def GetItem(self, n):
        return self.items[n]

    def AddItem(self, item):
        self.items.append(item)

    def OnGetLine(self, n):
        return self.items[n]

    def OnGetSize(self):
        return len(self.items)

    def OnSelectLine(self, n):
        item = self.GetItem(n)
        idc.Jump(long(item[0], 16))

#get the trace log generated by PIN
fileName = AskFile(1, "blockTrace.log", "Load the trace file")

#parse log file
res = ReadTraceFromFile(fileName)
addr_list = res[0]
base_in_file = res[1]

#rebase the program
base_addr = AskStr(defval=base_in_file, prompt="Enter the base address.")
base_addr = int(base_addr, base=16)
delta = base_addr - idaapi.get_imagebase()
rebase_program(delta, MSF_FIXONCE)

#inititalize the chooser
tc = blocktrace('blocktrace', [['Address', 10], ['Function', 10]])

for ea in addr_list:
    #SetBBColor(ea, 0xFFFFFF)
    SetBBColor(ea, 0xFFDEAD)
    temp = ['{0:X}'.format(ea), get_func_name(ea)]
    tc.AddItem(temp)

tc.Show()